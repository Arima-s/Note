function unique5(array) {
	var r = [];
	for (var i = 0, l = array.length; i < l; i++) {
		for (var j = i + 1; j < l; j++)
			if (array[i] === array[j]) j = ++i;
		r.push(array[i]);
	}
	return r;
}


Array.prototype.unique3 = function() {
	var res = [];
	var json = {};
	for (var i = 0; i < this.length; i++) {
		if (!json[this[i]]) {
			res.push(this[i]);
			console.log(res);
			json[this[i]] = 1;
			console.log(json);
		}
	}
	console.log(Array.isArray(res));
	return res;
}
var arr = [112, 112, 34, '你好', 112, 112, 34, '你好', 'str', 'str1'];
console.warn(arr.unique3());


function unique(arr) {
	var _arr = [],
			arrLength = arr.length;
	for(var i = 0; i < arrLength; i++) {
		var item = arr[i];
		if(_arr.indexOf(item) === -1){
			_arr.push(item);
		}
	}
	return _arr;
}

var arr = [112, 112, 34, '你好', 112, 112, 34, '你好', 'str', 'str1'];

unique(arr);


var indexOf = [].indexOf ?
	function(arr, item) {
		return arr.indexOf(item)
	} :
	function indexOf(arr, item) {
		for (var i = 0; i < arr.length; i++) {
			if (arr[i] === item) {
				return i
			}
		}
		return -1
	}

function unique(arr) {
	var ret = []

	for (var i = 0; i < arr.length; i++) {
		var item = arr[i]
		if (indexOf(ret, item) === -1) {
			ret.push(item)
		}
	}

	return ret
}

function unique(arr) {
	var _arr = [],
	  	hash = {},
	  	arrLength = arr.length;

	for (var i = 0; i < arrLength; i++) {
		var item = arr[i];
		var key = typeof(item) + item;
		if (hash[key] !== 1) {
			_arr.push(item);
			hash[key] = 1;
		}
	}

	return _arr;
}















function Unique(arr) {
	var _arr = [];
	var hash = {};
	var arrLength = arr.length;
	for(var i = 0; i < arrLength; i ++) {
		var item = arr[i];
		if(hash[item] !== 1) {
			_arr.push(item);
			hash[item] = 1;
		}
	}
	return _arr;
}

var arr = [112, 112, 34, '你好', 112, 112, 34, '你好', 'str', 'str1'];

Unique(arr);




var arr = [5,4,3];

function bubbleSort(arr) {
	for(var i = 0; i < arr.length - 1; i++) {
		console.log(i);
		for(var j = 0; j < arr.length - 1 - i; j ++){
			console.log(j);
			var temp = arr[j+1];
			if (temp < arr[j]) {
				arr[j+1] = arr[j];
				arr[j] = temp;
			}
			console.log(arr);
		}
	}
	return arr;
}

bubbleSort(arr);	



var arr = [5,4,3];


function selectionSort(arr) {
	var len = arr.length;
	var temp;
	for(var i = 0; i < len; i++) {
		console.log(i);
		for(var j = i + 1; j < len; j++) {
			console.log(j);
			if(arr[i] > arr[j]) {
				temp = arr[j];
				arr[j] = arr[i];
				arr[i] = temp;
				console.log(arr);
 			}
		}
	}
	return arr;
}

selectionSort(arr);

var arr = [9,6,8,3,1,2];

function selectionSort(arr) {
	var len = arr.length;
	var minIndex, temp;
	for (var i = 0; i < len - 1; i++) {
		minIndex = i;
		console.log(i);
		for (var j = i + 1; j < len; j++) {
			console.log(j);
			if (arr[j] < arr[minIndex]) { // 寻找最小的数
				minIndex = j; // 将最小数的索引保存
				console.warn(minIndex);
			}
		}
		temp = arr[i];
		arr[i] = arr[minIndex];
		arr[minIndex] = temp;
		console.log(arr);
	}
	return arr;
}

selectionSort(arr);

for(var i = 0; i < 5; i++) {
	setTimeout(function() {
		console.log(new Date,i);		
	},1000)
}


for(var i = 0; i < 5; i++) {
	(function(i){
		setTimeout(function() {
			console.log(new Date,i);		
		},1000)
	})(i);
}



var output = function(i) {
	setTimeout(function() {
		console.log(new Date, i);
	}, 1000);
};

for (var i = 0; i < 5; i++) {
	output(i); // 这里传过去的 i 值被复制了
}

console.log(new Date, i);





for (var i = 0; i < 5; i++) {
	(function(j) {
		setTimeout(function() {
			console.log(new Date, j);
		}, 1000 * j); 
	})(i);
}

setTimeout(function() { 
	console.log(new Date, i, 'second');
}, 1000 * i);



const tasks = [];
for (var i = 0; i < 5; i++) { // 这里 i 的声明不能改成 let，如果要改该怎么做？
	((j) => {
		tasks.push(new Promise((resolve) => {
			setTimeout(() => {
				console.log(new Date, j);
				resolve(); // 这里一定要 resolve，否则代码不会按预期 work
			}, 1000 * j); // 定时器的超时时间逐步增加
		}));
	})(i);
}

Promise.all(tasks).then(() => {
	setTimeout(() => {
		console.log(new Date, i);
	}, 1000); // 注意这里只需要把超时设置为 1 秒
});





const tasks = []; // 这里存放异步操作的 Promise
const output = (i) => new Promise((resolve) => {
	setTimeout(() => {
		console.log(new Date, i);
		resolve();
	}, 1000 * i);
});

// 生成全部的异步操作
for (var i = 0; i < 5; i++) {
	tasks.push(output(i));
}

// 异步操作完成之后，输出最后的 i
Promise.all(tasks).then(() => {
	setTimeout(() => {
		console.log(new Date, i);
	}, 1000);
});



var p = new Promise(function(resolve, reject) {
	setTimeout(function() {
		console.log('执行完成');
		resolve('=========>>>>>>>>>');
	},2000)
});


var _p = new Promise((resolve)=>{
	setTimeout(()=> {
		console.log('执行完成');
		resolve('=========>>>>>>>>>');
	},2000)
})


function runAsync() {
	var p = new Promise(function(resolve, reject) {
		//做一些异步操作
		setTimeout(function() {
			console.log('执行完成');
			resolve('随便什么数据');
		}, 2000);
	});
	return p;
}

runAsync().then(function(data){
    console.log(data);
    //后面可以用传过来的数据做些其他操作
    //......
});



function runAsync1() {
	var p = new Promise(function(resolve, reject) {
		//做一些异步操作
		setTimeout(function() {
			console.log('异步任务1执行完成');
			resolve('随便什么数据1');
		}, 1000);
	});
	return p;
}

function runAsync2() {
	var p = new Promise(function(resolve, reject) {
		//做一些异步操作
		setTimeout(function() {
			console.log('异步任务2执行完成');
			resolve('随便什么数据2');
		}, 2000);
	});
	return p;
}

function runAsync3() {
	var p = new Promise(function(resolve, reject) {
		//做一些异步操作
		setTimeout(function() {
			console.log('异步任务3执行完成');
			resolve('随便什么数据3');
		}, 2000);
	});
	return p;
}


runAsync1()
	.then(function(data) {
		console.log(data);
		return runAsync2();
	})
	.then(function(data) {
		console.log(data);
		return runAsync3();
	})
	.then(function(data) {
		console.log(data);
	});



var arr1 = [1,3,5,7,9,13];
var arr2 = [2,4,6,8,10,12,13,14];

function doSort(arr1, arr2, x) {
	var arr = [];
	for(var i = 0; i < x; i++) {
		var item1 = arr1[arr1.length-1];
		var item2 = arr2[arr2.length-1];
		if(item1 > item2 || item1 == item2) {
			arr.push(item1);
			arr1.pop(item1);
		} else if (item1 < item2) {
			arr.push(item2);
			arr2.pop(item2);
		}
	}
	return arr.reverse();
}

doSort(arr1, arr2, 5)



































